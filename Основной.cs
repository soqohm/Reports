using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

using TFlex.DOCs.Model.Macros;
using TFlex.DOCs.Model.Macros.ObjectModel;
using TFlex.Model.Technology.Macros.ObjectModel;
using TFlex.Reporting.CAD.MacroGenerator.Macros;
using TFlex.Reporting.CAD.MacroGenerator.ObjectModel;
using TFlex.Reporting.Technology.Macros;

public class Macro : ReportMacroProvider
{
    public Macro(ReportGenerationMacroContext context)
        : base(context)
    {
    }

    public override void Run()
    {
    }

    public void СформироватьОтчет1() // ТЛ (+ЛУ) (комплект ТД)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);
        ПолучитьНаименованиеОбщего(техпроцесс);
    }

    public void СформироватьОтчет2() // ТЛ (+ЛУ) (техпроцесс)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);
        ПолучитьНаименованиеОбщего(техпроцесс);
    }

    public void СформироватьОтчет3() // ЛРИ (в)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);
    }

    public void СформироватьОтчет4() // ЛРИ (г)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);
    }

    public void СформироватьОтчет5() // КИКД
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);

        СформироватьКИКД(техпроцесс);
    }

    public void СформироватьОтчет6() // МК-КТП (мехобработка)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьОбозначениеТекущего(техпроцесс);
        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);

        ЗаполнитьСтрокуМ01М02(техпроцесс);
        СформироватьКартуИзБукв(техпроцесс, new List<string>() { "А", "Б", "К", "М", "О", "Т", "Р" });
    }

    public void СформироватьОтчет7() // МК-КТП (сборка)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьОбозначениеТекущего(техпроцесс);
        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);

        СформироватьКартуИзБукв(техпроцесс, new List<string>() { "А", "Б", "К", "М", "О", "Т", "Р" });
    }

    public void СформироватьОтчет8() // МК-КТП (сборка)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьОбозначениеТекущего(техпроцесс);
        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);

        СформироватьКартуИзБукв(техпроцесс, new List<string>() { "А", "Б", "К", "М", "О", "Т", "Р" });
    }

    public void СформироватьОтчет9() // МК-КТП (термообработка)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьОбозначениеТекущего(техпроцесс);
        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);

        ЗаполнитьСтрокуМ01М02(техпроцесс);
        СформироватьКартуИзБукв(техпроцесс, new List<string>() { "А", "Б", "К", "М", "О", "Т", "Р" });
    }

    public void СформироватьОтчет10() // МК-КТТП (термообработка)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьОбозначениеТекущего(техпроцесс);
        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);

        СформироватьКартуИзБукв(техпроцесс, new List<string>() { "А", "Б", "К", "М", "О", "Т", "Р" });
    }

    public void СформироватьОтчет11() // МК-КТТП (термообработка)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьОбозначениеТекущего(техпроцесс);
        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);

        СформироватьКартуИзБукв(техпроцесс, new List<string>() { "А", "Б", "К", "М", "О", "Т", "Р" });
    }

    public void СформироватьОтчет12() // КТТП (окраска)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьОбозначениеТекущего(техпроцесс);
        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);

        СформироватьКартуИзБукв(техпроцесс, new List<string>() { "А", "Б", "М", "О", "Т", "Р" });
    }

    public void СформироватьОтчет13() // КТТП (термообработка)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьОбозначениеТекущего(техпроцесс);
        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);

        СформироватьКартуИзБукв(техпроцесс, new List<string>() { "А", "Б", "М", "О", "Т", "Р" });
    }

    public void СформироватьОтчет14() // ТИ
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьДеталиТекущего(техпроцесс);
        ПолучитьОбозначениеОбщего(техпроцесс);
    }

    public void СформироватьОтчет15() // ТИ (+ЛУ)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьДеталиТекущего(техпроцесс);
        ПолучитьОбозначениеОбщего(техпроцесс);
    }

    public void СформироватьОтчет16() // ТЛ (литейное производство)
    {
        var техпроцесс = ПолучитьТехпроцессИлиПрервать();

        ПолучитьНаименованиеТекущего(техпроцесс);
        ПолучитьДеталиТекущего(техпроцесс);

        ПолучитьОбозначениеОбщего(техпроцесс);
        ПолучитьНаименованиеОбщего(техпроцесс);
    }

    public ТехнологическийПроцесс ПолучитьТехпроцессИлиПрервать()
    {
        var объект = ТекущийОбъект;
        if (!объект.Тип.ПорожденОт("Базовый технологический процесс"))
            Break();
        return (ТехнологическийПроцесс)объект;
    }

    public void ПолучитьОбозначениеТекущего(ТехнологическийПроцесс техпроцесс)
    {
        Переменная["$НомерДокумента"] = техпроцесс.Обозначение;
    }

    public void ПолучитьНаименованиеТекущего(ТехнологическийПроцесс техпроцесс)
    {
        Переменная["$НаименованиеДокумента"] = техпроцесс.Наименование;
    }

    public void ПолучитьДеталиТекущего(ТехнологическийПроцесс техпроцесс)
    {
        var списокДСЕ = техпроцесс.ИзготавливаемыеДСЕ;

        if (списокДСЕ.Count == 1)
        {
            var дсе = списокДСЕ.First();
            Переменная["$ОбозначениеИзделия1"] = дсе.Параметр["Обозначение"];
        }
        else if (списокДСЕ.Count == 2)
        {
            var дсе1 = списокДСЕ.First();
            var дсе2 = списокДСЕ.Last();
            Переменная["ДваОбозначения"] = "1";
            Переменная["$ОбозначениеИзделия1"] = " ";
            Переменная["$ОбозначениеИзделия2"] = дсе1.Параметр["Обозначение"];
            Переменная["$ОбозначениеИзделия3"] = дсе2.Параметр["Обозначение"];
        }
        else if (списокДСЕ.Count > 2)
        {
            var дсе = списокДСЕ.First();
            Переменная["$ОбозначениеИзделия1"] = дсе.Параметр["Обозначение"] + " и др.";
        }
        else
            Переменная["$ОбозначениеИзделия1"] = "-";
    }

    public void ПолучитьОбозначениеОбщего(ТехнологическийПроцесс техпроцесс)
    {
        var общийДокумент = техпроцесс.ОбщийТехнологическийПроцесс;
        if (общийДокумент != null)
            Переменная["$НомерОбщегоДокумента"] = общийДокумент.Обозначение;
    }

    public void ПолучитьНаименованиеОбщего(ТехнологическийПроцесс техпроцесс)
    {
        var общийДокумент = техпроцесс.ОбщийТехнологическийПроцесс;
        if (общийДокумент != null)
            Переменная["$НаименованиеОбщегоДокумента"] = общийДокумент.Наименование;
    }

    public void СформироватьКИКД(ТехнологическийПроцесс техпроцесс)
    {
        var блокДанныхКИКД1 = new БлокДанныхКИКД(Текст["Параграф-текст1"]);
        var блокДанныхКИКД2 = new БлокДанныхКИКД(Текст["Параграф-текст2"]);
        var блокДанныхКИКД3 = new БлокДанныхКИКД(Текст["Параграф-текст3"]);
        var блокДанныхКИКД4 = new БлокДанныхКИКД(Текст["Параграф-текст4"]);

        var списокДСЕ = техпроцесс.ИзготавливаемыеДСЕ;

        var n = 0;
        foreach (var дсе in списокДСЕ)
        {
            n++;

            if (n < 16)
                блокДанныхКИКД1.ДобавитьСтроку(дсе, n);
            else if (n < 31) 
                блокДанныхКИКД2.ДобавитьСтроку(дсе, n);
            else if (((n - 31) / 16) % 2 == 0) 
                блокДанныхКИКД3.ДобавитьСтроку(дсе, n);
            else 
                блокДанныхКИКД4.ДобавитьСтроку(дсе, n);
        }
    }

    public class БлокДанныхКИКД
    {
        public readonly Текст текст;
        public readonly ШаблонСтроки шаблон;

        public БлокДанныхКИКД(Текст текст)
        {
            this.текст = текст;
            шаблон = текст["ОбозначениеДСЕ"];
        }

        public void ДобавитьСтроку(Объект дсе, int number)
        {
            var строка = текст.Таблица.ДобавитьСтроку(шаблон);
            
            строка["Счетчик"].Текст = number;
            строка["ОбозначениеДСЕ"].Текст = дсе.Параметр["Обозначение"];
            строка["Номер"].Текст = ПолучитьНомерПоследнегоИзмененияКД(дсе);
        }

        public string ПолучитьНомерПоследнегоИзмененияКД(Объект дсе)
        {
            var списокИзменений = дсе.СвязанныеОбъекты["Изменения"];

            if (списокИзменений.Count > 0)
                return списокИзменений
                    .Select(изменение => изменение["№ изменения"].ToString())
                    .Max();
            return "";
        }
    }

    public void ЗаполнитьСтрокуМ01М02(ТехнологическийПроцесс техпроцесс)
    {
        var материал = техпроцесс.Материалы.FirstOrDefault();

        Переменная["$Наименование_материала"] = материал.Наименование_();
        Переменная["$Код"] = материал.Код();
        Переменная["$ЕВ"] = материал.ЕиНормыРасхода_();
        Переменная["$МД"] = "-";
        Переменная["$ЕН"] = материал.ЕН_();
        Переменная["$Нрасх"] = материал.НормаРасхода_();
        Переменная["$КИМ"] = материал.КИМ_();
        Переменная["$Код_заготовки"] = материал.КодЗаготовки();
        Переменная["$Профиль_и_размеры"] = материал.РазмерыЗаготовки();
        Переменная["$КД"] = материал.КД_();
        Переменная["$МЗ"] = материал.МассаЗаготовки_();
    }

    public void СформироватьКартуИзБукв(ТехнологическийПроцесс техпроцесс, List<string> строки)
    {
        var текст = Текст["Параграф-текст1"];

        foreach (var операция in техпроцесс.Операции)
        {
            текст.ДобавитьСтрокуТТ(операция, Место.передОперацией);

            if (строки.Contains("А")) текст.ДобавитьСтрокуА(операция);
            if (строки.Contains("Б")) текст.ДобавитьСтрокуБ(операция);
            if (строки.Contains("К")) текст.ДобавитьСтрокуК(операция);
            if (строки.Contains("М")) текст.ДобавитьСтрокуМ(операция);

            foreach (var переход in операция.Переходы)
            {
                if (строки.Contains("О")) текст.ДобавитьСтрокуО(переход);
                if (строки.Contains("Т")) текст.ДобавитьСтрокуТ(переход);
                if (строки.Contains("Р")) текст.ДобавитьСтрокуР(переход);
            }

            текст.ДобавитьРазделитель();

            текст.ДобавитьСтрокуТТ(операция, Место.послеОперации);
        }
    }
}

public enum Место
{
    поУмолчанию,
    передОперацией,
    послеОперации
}

public static class Расширения
{
    public static void ДобавитьРазделитель(this Текст текст)
    {
        var строка = текст.Таблица.ДобавитьСтроку(текст["Разделитель"]);

        строка["Разделитель"].Текст = "";
    }

    public static Строка СоздатьСтроку(this Текст текст, string шаблон, string буква, bool ставитьБукву)
    {
        var строка = текст.Таблица.ДобавитьСтроку(текст[шаблон]);
        if (ставитьБукву) 
            строка[шаблон].Текст = буква;
        return строка;
    }

    public static void ДобавитьСтрокуА(this Текст текст, Операция операция)
    {
        var строка = текст.СоздатьСтроку("А", "А", true);

        строка["Цех"].Текст = операция.Цех();
        строка["Уч"].Текст = операция.Участок();
        строка["РМ"].Текст = операция.РабочееМесто();

        строка["Номер операции"].Текст = операция.Номер;
        строка["Код и наименование операции"].Текст = $"{операция.Код}  {операция.Наименование}";
        строка["Список инструкций"].Текст = операция.Инструкции();
    }

    public static string Цех(this Операция операция)
    {
        if (операция.Цех == null) return "-";
        else
            return операция.Цех["Номер"];
    }

    public static string Участок(this Операция операция)
    {
        if (операция.Участок == null) return "-";
        else
            return операция.Участок["Номер"];
    }

    public static string РабочееМесто(this Операция операция)
    {
        if (операция.РабочееМесто == null) return "-";
        else
            return операция.РабочееМесто["Номер"];
    }

    public static string Инструкции(this Операция операция)
    {
        if (операция.Инструкции.Length == 0)
            return "";

        var инструкции = "";
        foreach (var инструкция in операция.Инструкции)
            инструкции += $"{инструкция["Шифр / обозначение"]}; ";
        return
            инструкции.Substring(0, инструкции.Length - 2);
    }

    public static void ДобавитьСтрокуБ(this Текст текст, Операция операция)
    {
        var оборудование = операция.Оборудование();
        var исполнители = операция.Исполнители;
        var ставитьБукву = true;
        var теги = текст["Б"].Ячейки.Select(e => e.Тег).ToList();

        if (оборудование.Count > 0)
        {
            foreach (var О in оборудование)
            {
                var строка = текст.СоздатьСтроку("Б", "Б", ставитьБукву);
                var исполнитель = исполнители.НайтиПоПрофессии(О.Профессия());
                строка.ЗаполнитьСтрокуБ(операция, О, исполнитель, теги);
                ставитьБукву = false;
            }
        }
        else if (исполнители.Length > 0)
        {
            foreach (var И in исполнители)
            {
                var строка = текст.СоздатьСтроку("Б(У)", "Б", ставитьБукву);
                строка.ЗаполнитьСтрокуБ(операция, null, И, теги);
                ставитьБукву = false;
            }
        }
        else
        {
            var строка = текст.СоздатьСтроку("Б(У)", "Б", true);
            строка.ЗаполнитьСтрокуБ(операция, null, null, теги);
        }

        //текст.ДобавитьРазделитель();
    }

    public static void ЗаполнитьСтрокуБ(this Строка строка, Операция операция, Оснащение оборудование, Исполнитель исполнитель, List<string> теги)
    {
        строка["Перечень оборудования"].Текст = оборудование.СводноеНаименование();

        строка["СМ"].Текст = исполнитель.СМ_();
        строка["Проф"].Текст = исполнитель.Профессия_();
        строка["Р"].Текст = исполнитель.Разряд_();
        строка["УТ"].Текст = исполнитель.УсловияТруда_();
        строка["КР"].Текст = исполнитель.КолРабочих_();

        if (теги.Contains("ЕН")) строка["ЕН"].Текст = исполнитель.ЕН_();
        if (теги.Contains("ОП")) строка["ОП"].Текст = "-";
        if (теги.Contains("Кшт")) строка["Кшт"].Текст = исполнитель.Кшт_();

        if (теги.Contains("КОИД")) строка["КОИД"].Текст = операция.КОИД_();
        if (теги.Contains("Тпз")) строка["Тпз"].Текст = операция.Тпз_();
        if (теги.Contains("Тшт")) строка["Тшт"].Текст = операция.Тшт_();

        if (теги.Contains("КУО")) строка["КУО"].Текст = "-";
    }

    public static List<Оснащение> Оборудование(this Операция операция)
    {
        return операция.Оснащение
            .Where(оснащение => оснащение.СвязанныйОбъект["Оснащение из справочника СТО"].Тип.ПорожденОт("Оборудование"))
            .ToList();
    }

    public static string СводноеНаименование(this Оснащение оборудование)
    {
        if (оборудование == null) 
            return "-";

        var справочник = оборудование.СвязанныйОбъект["Оснащение из справочника СТО"];
        var инвентарный = "";

        if (справочник != null)
            инвентарный = справочник.Параметр["Инвентарный номер"];

        if (инвентарный == "")
            return оборудование.Наименование;
        else
            return $"{оборудование.Наименование}, инв. № {инвентарный}";
    }

    public static string СМ_(this Исполнитель исполнитель)
    {
        if (исполнитель == null || исполнитель.СМ == 0) 
            return "-";
        return исполнитель.СМ.ToString();
    }

    public static string Профессия_(this Исполнитель исполнитель)
    {
        if (исполнитель == null || исполнитель.Профессия == null) 
            return "-";
        return исполнитель.Профессия.Параметр["Код профессии"];
    }

    public static string Разряд_(this Исполнитель исполнитель)
    {
        if (исполнитель == null || исполнитель.Разряд == 0) 
            return "-";
        return исполнитель.Разряд.ToString();
    }

    public static string УсловияТруда_(this Исполнитель исполнитель)
    {
        if (исполнитель == null || исполнитель.УсловияТруда == "") 
            return "-";
        return исполнитель.УсловияТруда.ToString();
    }

    public static string КолРабочих_(this Исполнитель исполнитель)
    {
        if (исполнитель == null || исполнитель.КолРабочих == 0) 
            return "-";
        return исполнитель.КолРабочих.ToString();
    }

    public static int ЕН_(this Исполнитель исполнитель)
    {
        if (исполнитель == null || исполнитель.ЕН == 0) 
            return 1;
        return исполнитель.ЕН;
    }

    public static string Кшт_(this Исполнитель исполнитель)
    {
        if (исполнитель == null || исполнитель.Кшт == 0) 
            return "-";
        return исполнитель.Кшт.ToString();
    }

    public static string КОИД_(this Операция операция)
    {
        if (операция.КОИД == 0) 
            return "-";
        return операция.КОИД.ToString();
    }

    public static string Тпз_(this Операция операция)
    {
        if (операция.Тпз == 0) 
            return "-";
        return операция.Тпз.ToString();
    }

    public static string Тшт_(this Операция операция)
    {
        if (операция.Тшт == 0) 
            return "-";
        return операция.Тшт.ToString();
    }

    public static Исполнитель НайтиПоПрофессии(this Исполнитель[] исполнители, string профессия)
    {
        return исполнители
            .Where(исполнитель => исполнитель.Профессия_() == профессия)
            .FirstOrDefault();
    }

    public static string Профессия(this Оснащение оборудование)
    {
        var справочник = оборудование.СвязанныйОбъект["Оснащение из справочника СТО"];
        if (справочник != null)
            return справочник.Параметр["Код профессии"];
        return "";
    }

    public static void ДобавитьСтрокуК(this Текст текст, Операция операция)
    {
        if (!операция.Тип.ПорожденОт("Сборочная операция"))
            return;

        var компоненты = операция.СвязанныеОбъекты["Комплект на операцию"];
        if (компоненты.Count == 0)
            return;

        var ставитьБукву = true;
        foreach (var компонент in компоненты)
        {
            var строка = текст.СоздатьСтроку("К", "К", ставитьБукву);
            строка.ЗаполнитьСтрокуК(компонент);
            ставитьБукву = false;
        }

        //текст.ДобавитьРазделитель();
    }

    public static void ЗаполнитьСтрокуК(this Строка строка, Объект компонент)
    {
        строка["Наименование ДСЕ"].Текст = компонент.СводноеНаименование();
        строка["Обозначение ДСЕ"].Текст = компонент["Обозначение"];
        строка["ООП"].Текст = "-";
        строка["ЕВ"].Текст = компонент.ЕВ();
        строка["ЕН"].Текст = "-";
        строка["КИ"].Текст = компонент.Количество();
        строка["Нрасх"].Текст = "-";
    }

    public static string СводноеНаименование(this Объект компонент)
    {
        int позиция = компонент["Позиция"];
        if (позиция == 0)
            return компонент["Наименование"];
        else
            return $"{компонент["Наименование"]}  (поз.{позиция})";
    }

    public static string ЕВ(this Объект компонент)
    {
        string ЕВ = компонент.Параметр["Единица измерения"];
        if (ЕВ == "") 
            return "-";
        return ЕВ;
    }

    public static int Количество(this Объект компонент)
    {
        int количество = компонент.Параметр["Количество"];
        if (количество == 0)
            return 1;
        return количество;
    }

    public static void ДобавитьСтрокуМ(this Текст текст, Операция операция)
    {
        var материалы = операция.Материалы;
        if (материалы.Length == 0)
            return;

        var ставитьБукву = true;
        var теги = текст["М"].Ячейки.Select(e => e.Тег).ToList();

        foreach (var материал in материалы)
        {
            var строка = текст.СоздатьСтроку("М", "М", ставитьБукву);
            строка.ЗаполнитьСтрокуМ(материал, теги);
            ставитьБукву = false;
        }

        //текст.ДобавитьРазделитель();
    }

    public static void ЗаполнитьСтрокуМ(this Строка строка, Материал материал, List<string> теги)
    {
        строка["Наименование материала"].Текст = материал.Наименование;
        строка["Обозначение материала"].Текст = материал.Параметр["[Материал]->[Код / обозначение]"];

        if (теги.Contains("ООП")) строка["ООП"].Текст = материал.Поставщик_();
        if (теги.Contains("ЕВ")) строка["ЕВ"].Текст = материал.ЕиНормыРасхода_();
        if (теги.Contains("ЕН")) строка["ЕН"].Текст = материал.ЕН_();
        if (теги.Contains("КИ")) строка["КИ"].Текст = "-";
        if (теги.Contains("Нрасх")) строка["Нрасх"].Текст = материал.НормаРасхода_();

        if (теги.Contains("Конц")) строка["Конц"].Текст = материал.Параметр("Концентрация");
        if (теги.Contains("Вязкость")) строка["Вязкость"].Текст = материал.Параметр("Вязкость");
        if (теги.Contains("Фракция")) строка["Фракция"].Текст = материал.Параметр("Фракция");
        if (теги.Contains("Плотность")) строка["Плотность"].Текст = материал.Параметр("Плотность");
    }

    public static string Поставщик_(this Материал материал)
    {
        var поставщик = материал.Поставщик;
        if (поставщик != null)
            return поставщик.Параметр["Номер"];
        return "-";
    }

    public static string ЕиНормыРасхода_(this Материал материал)
    {
        if (материал == null)
            return "-";

        var еиНрасх = материал.ЕиНормыРасхода;
        if (еиНрасх != null)
            return еиНрасх.Параметр["Сокращённое наименование"];
        return "-";
    }

    public static string ЕН_(this Материал материал)
    {
        if (материал == null || материал.ЕН == 0)
            return "1";
        return материал.ЕН.ToString();
    }

    public static string НормаРасхода_(this Материал материал)
    {
        if (материал == null || материал.НормаРасхода == 0)
            return "-";
        return материал.НормаРасхода.ToString();
    }

    public static string Параметр(this Материал материал, string имяПараметра)
    {
        var м = материал.СвязанныйОбъект["Материал"];
        double параметр = м.Параметр[$"[Физические свойства]->[{имяПараметра}]"];

        if (параметр == 0)
            return "-";

        string еи = м.Параметр[$"[ЕИ ({имяПараметра})]->[Сокращённое наименование]"];
        if (еи == null)
            return параметр.ToString();
        else
            return $"{параметр} {еи}";
    }

    public static string КИМ_(this Материал материал)
    {
        if (материал == null || материал.КИМ == 0)
            return "-";
        return материал.КИМ.ToString();
    }

    public static string МассаЗаготовки_(this Материал материал)
    {
        if (материал == null || материал.МассаЗаготовки == 0)
            return "-";
        return материал.МассаЗаготовки.ToString();
    }

    public static string КД_(this Материал материал)
    {
        if (материал == null || материал.КД == 0)
            return "-";
        return материал.КД.ToString();
    }

    public static string Код(this Материал материал)
    {
        if (материал == null)
            return "-";

        var справочник = материал.СвязанныйОбъект["Материал"];
        if (справочник != null)
            return справочник["Код / обозначение"];
        return "-";
    }

    public static string КодЗаготовки(this Материал материал)
    {
        if (материал == null)
            return "-";
        else
            return материал.Параметр["[Сортамент заготовки]->[Наименование]"];
    }

    public static string РазмерыЗаготовки(this Материал материал)
    {
        if (материал == null)
            return "-";
        else
            return материал.Параметр["[Сортамент заготовки]->[Обозначение]"];
    }

    public static string Наименование_(this Материал материал)
    {
        if (материал == null)
            return "-";
        return материал.Наименование;
    }

    public static void ДобавитьСтрокуО(this Текст текст, Переход переход)
    {
        if (переход["Тип проецирования в отчетах"] != 0)
            return;

        var строка = текст.СоздатьСтроку("О", "О", true);

        if (переход.Номер == "")
            строка["Текст перехода"].Текст = переход.Текст;
        else
            строка["Текст перехода"].Текст = $"{переход.Номер}  {переход.Текст}";

        //текст.ДобавитьРазделитель();
    }

    public static void ДобавитьСтрокуТ(this Текст текст, Переход переход)
    {
        var список = переход.Оснащение.Length;
        if (список == 0)
            return;

        string оснастка;

        if (список > 5)
            оснастка = переход.Оснащение.ВывестиГруппами();
        else
            оснастка = переход.Оснащение.ВывестиСписком();

        var инструкции = переход.Инструкции();
        if (оснастка.Length > 0 && инструкции.Length > 0)
            оснастка += "\r\n" + "РИ:  " + инструкции;

        var строка = текст.СоздатьСтроку("Т", "Т", true);
        строка["Список оснастки"].Текст = оснастка;

        //текст.ДобавитьРазделитель();
    }

    public static string ВывестиГруппами(this Оснащение[] всяОснастка)
    {
        var группы = new Dictionary<string, string>()
        {
            { "ПР", "Приспособления" },
            { "ВИ", "Вспомогательный инструмент" },
            { "РИ", "Режущий инструмент" },
            { "ОО", "Вспомогательная оснастка" },
            { "СЛ", "Слесарный и слесарно-сборочный инструмент" },
            { "СИ", "Средства измерения" },
            { "СЗ", "Средства защиты" },
            { "ВМ", "Вспомогательный материал" },
            { "СЖ", "Смазочно-охлаждающая жидкость" },
        };

        var список = new StringBuilder();

        foreach (var группа in группы)
        {
            var оснастка = всяОснастка
                .Where(О => О.ТипОснащенияКаталога == группа.Value)
                .ToArray();

            if (список.Length > 0 && оснастка.Length > 0)
                список.Append("\r\n" + группа.Key + ":  " + оснастка.ВывестиСписком());
            else if (оснастка.Length > 0)
                список.Append(группа.Key + ":  " + оснастка.ВывестиСписком());
        }

        return список.ToString();
    }

    public static string ВывестиСписком(this Оснащение[] оснастка)
    {
        if (оснастка.Length == 0)
            return "";

        var список = "";
        foreach (var О in оснастка)
            список += $"{О["Строка оснащения"]}; ";
        return
            список.Substring(0, список.Length - 2);
    }

    public static string Инструкции(this Переход переход)
    {
        if (переход.Инструкции.Length == 0)
            return "";

        var инструкции = "";
        foreach (var инструкция in переход.Инструкции)
            инструкции += $"{инструкция["Шифр / обозначение"]}; ";
        return
            инструкции.Substring(0, инструкции.Length - 2);
    }

    public static void ДобавитьСтрокуР(this Текст текст, Переход переход)
    {
        if (переход.Режимы.Length == 0)
            return;

        var строкаР1Создана = текст.ЗаполнитьСтрокуР(переход, "Р1");
        var строкаР2Создана = текст.ЗаполнитьСтрокуР(переход, "Р2");

        if (!строкаР1Создана && !строкаР2Создана)
        {
            var строка = текст.СоздатьСтроку("Р0", "Р", true);
            строка["Режимы"].Текст = переход.Режимы();
        }

        //текст.ДобавитьРазделитель();
    }

    public static bool ЗаполнитьСтрокуР(this Текст текст, Переход переход, string буква)
    {
        var строкаСоздана = false;

        var шаблон = текст[буква];
        if (шаблон == null)
            return строкаСоздана;

        var теги = текст[буква].Ячейки
            .Select(e => e.Тег)
            .ToList();

        var естьШаблон = переход.Режимы
            .Where(Р => теги.Contains(Р.Наименование))
            .FirstOrDefault();

        if (естьШаблон != null)
        {
            строкаСоздана = true;
            var строка = текст.СоздатьСтроку(буква, буква, true);

            foreach (var Р in переход.Режимы)
                if (теги.Contains(Р.Наименование))
                    строка[Р.Наименование].Текст = Р.Значение;
        }
        return строкаСоздана;
    }

    public static string Режимы(this Переход переход)
    {
        var режимы = "";
        foreach (var Р in переход.Режимы)
            режимы += $"{Р.Наименование} = {Р.Значение} {Р["[ЕИ режима обработки]->[Сокращённое наименование]"]}; ";
        return
            режимы.Substring(0, режимы.Length - 2);
    }

    public static void ДобавитьСтрокуТТ(this Текст текст, Операция операция, Место место)
    {
        var переходы = операция.Переходы
            .Where(п => п["Тип проецирования в отчетах"] == (int)место)
            .ToList();

        if (переходы.Count == 0)
            return;

        foreach(var переход in переходы)
        {
            var строка = текст.СоздатьСтроку("О", "", true);
            строка["Текст перехода"].Текст = переход.Текст;
        }

        текст.ДобавитьРазделитель();
    }


}